name: CI

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  VERSION_UV: '0.4.13'

jobs:
  lint:
    timeout-minutes: 5
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.VERSION_UV }}
          enable-cache: true

      - name: setup python
        run: uv python install 3.9

      - name: uv sync
        run: uv sync --frozen

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          VERSION="$(uv pip show mainpy | grep "^Version:" | cut -f2- -d ' ')"

          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: codespell
        run: uv run codespell .

      - name: ruff check
        run: uv run ruff check --output-format=github

      - name: markdownlint
        uses: DavidAnson/markdownlint-cli2-action@v17
        with:
          config: ".markdownlint.yaml"
          globs: "*.md"

      - name: repo-review
        uses: scientific-python/repo-review@v0.11.2
        with:
          plugins: sp-repo-review

      - name: basedmypy
        run: uv run mypy

      - name: basedpyright
        run: uv run basedpyright

      - name: basedpyright --verifytypes
        run: uv run basedpyright --ignoreexternal --verifytypes mainpy

  test:
    timeout-minutes: 5

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.9", "3.12", "3.13"]

    runs-on: ${{ matrix.os }}

    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: setup uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.VERSION_UV }}
          enable-cache: true

      - name: setup python
        run: uv python install ${{ matrix.python-version }}

      - name: uv sync
        run: uv sync --frozen

      - name: pytest
        run: uv run pytest

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  release-draft:
    name: Release draft
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Remove old release drafts by using the curl request for the available releases with a draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create a new release draft which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "v${{ needs.build.outputs.version }}" \
            --draft \
            --title "v${{ needs.build.outputs.version }}" \
          )"
