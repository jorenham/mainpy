[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.poetry]
name = "mainpy"
version = "1.3.0"
description = "Simplify your project's main entrypoint definition with @main"
authors = ["Joren Hammudoglu <jhammudoglu@gmail.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/jorenham/mainpy"
documentation = "https://github.com/jorenham/mainpy?tab=readme-ov-file#mainpy"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Operating System :: OS Independent",
    "Typing :: Typed",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/jorenham/mainpy/issues"
"Changelog" = "https://github.com/jorenham/mainpy/releases"

[tool.poetry.extras]
uvloop = ["uvloop"]

[tool.poetry.dependencies]
python = "^3.8"
typing_extensions = {version = "^4.1", python = "<3.11"}

[tool.poetry.dependencies.uvloop]
version = ">=0.14,<1.0"
optional = true
markers = 'sys_platform != "win32"'
python = "<3.13"

[tool.poetry.group.dev.dependencies]
pre-commit = {version = "^3.7.0", python = ">=3.9"}
tox = "^4.15.0"

[tool.poetry.group.lint.dependencies]
sp-repo-review = {version = "^2024.4.23", extras = ["cli"], python = ">=3.10"}
codespell = "^2.2.6"
ruff = "^0.4.2"

[tool.poetry.group.test.dependencies]
pytest = "^8.2.0"

[tool.poetry.group.typecheck.dependencies]
basedpyright = "^1.11.0"
typing_extensions = "*"
pytest = "*"

[tool.poetry.group.test-github]
optional = true
[tool.poetry.group.test-github.dependencies]
pytest-github-actions-annotate-failures = ">=0.2.0,<1"


[tool.pytest.ini_options]
addopts = ["-ra", "--strict-markers", "--strict-config"]
filterwarnings = ["error"]
log_cli_level = "INFO"
minversion = "8.0"
testpaths = ["tests"]
xfail_strict = true


[tool.codespell]
context = 2


[tool.basedpyright]
include = ["mainpy", "tests"]
exclude = [
    "**/__pycache__",
    ".git",
    ".github",
    ".pytest_cache",
    ".ruff_cache",
    ".vscode",
    "dist",
]
ignore = ["**/.venv"]
stubPath = "."
venvPath = "."
venv = ".venv"
pythonVersion = "3.8"
pythonPlatform = "All"
typeCheckingMode = "all"
reportAny = false
reportUnusedCallResult = false
reportInvalidCast = false
# this appears to be broken since pyright 1.1.359
reportUntypedFunctionDecorator = false
# because of `sys.version_info()` conditionals
reportUnreachable = false


[tool.repo-review]
ignore = [
    "PY004",    # README.md >> docs/
    "PC110",    # optype's style >> (black | ruff-format)
    "PC140",    # (based)pyright >> mypy (by several orders of magnitude)
    "PC170",    # no .rst
    "PC180",    # no .css or .js
    "MY",       # (based)pyright >> mypy (by several orders of magnitude)
    "RTD",      # README.md >> rtd
]


[tool.ruff]
src = ["mainpy", "tests"]
target-version = "py38"
line-length = 79
indent-width = 4
show-fixes = true
force-exclude = true
extend-exclude = [".github", ".vscode"]

[tool.ruff.lint]
ignore-init-module-imports = true
preview = true
select = [
    "F",        # pyflakes
    "E",        # pycodestyle error
    "W",        # pycodestyle warning
    "I",        # isort
    "N",        # pep8-naming
    "UP",       # pyupgrade
    "YTT",      # flake8-2020
    "ANN",      # flake8-annotations
    "ASYNC",    # flake8-async
    "TRIO",     # flake8-trio
    "S",        # flake8-bandit
    "BLE",      # flake8-blind-except
    "B",        # flake8-bugbear
    "A",        # flake8-builtins
    "COM",      # flake8-commas
    "C4",       # flake8-comprehensions
    "DTZ",      # flake8-datetimez
    "T10",      # flake8-debugger
    "EXE",      # flake8-executable
    "FA",       # flake8-future-annotations
    "ISC",      # flake8-implicit-str-concat
    "ICN",      # flake8-import-conventions
    "G",        # flake8-logging-format
    "INP",      # flake8-no-pep420
    "PIE",      # flake8-pie
    "T20",      # flake8-print
    "PYI",      # flake8-pyi
    "PT",       # flake8-pytest-style
    "Q",        # flake8-quotes
    "RSE",      # flake8-raise
    "RET",      # flake8-return
    "SLF",      # flake8-self
    "SLOT",     # flake8-slots
    "SIM",      # flake8-simplify
    "TID",      # flake8-tidy-imports
    "TCH",      # flake8-type-checking
    "ARG",      # flake8-unused-arguments
    "PTH",      # flake8-use-pathlib
    "TD",       # flake8-todos
    "FIX",      # flake8-fixme
    "ERA",      # eradicate
    "PD",       # pandas-vet
    "PGH",      # pygrep-hooks
    "PL",       # pylint
    "TRY",      # tryceratops
    "FLY",      # flynt
    "NPY",      # numpy
    "AIR",      # airflow
    "PERF",     # perflint,
    "FURB",     # refurb
    "LOG",      # flake8-logging
    "RUF",      # ruff
]
ignore = [
    "ANN401",   # flake8-annotations: any-type
    "PLC0415",  # pylint: import-outside-top-level
]
[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S",        # flake8-bandit
    "ANN",      # flake8-annotations
    "ARG001",   # flake8-unused-arguments: unused-function-argument
    "SLF001",   # flake8-self: private-member-access
]

[tool.ruff.lint.pycodestyle]
max-line-length = 79

[tool.ruff.lint.isort]
case-sensitive = true
combine-as-imports = true
known-first-party = ["mainpy"]
lines-after-imports = 2
lines-between-types = 0

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.format]
docstring-code-format = true
indent-style = "space"
line-ending = "lf"
quote-style = "single"
skip-magic-trailing-comma = true


[tool.tox]
legacy_tox_ini = """
[tox]
isolated_build = true
requires =
    tox>=4
envlist =
    py{38,312,313}
    codespell
    ruff
    basedpyright

[testenv]
description = pytest
skip_install = true
allowlist_externals = poetry
commands_pre = poetry install --without=lint --extras=uvloop --sync
commands = poetry run pytest

[testenv:codespell]
description = codespell
skip_install = true
allowlist_externals = poetry
commands_pre = poetry install --only=lint --no-root --sync
commands = poetry run codespell .

[testenv:ruff]
description = ruff check
skip_install = true
allowlist_externals = poetry
commands_pre = poetry install --only=lint --no-root --sync
commands = poetry run ruff check

[testenv:basedpyright]
description = basedpyright
skip_install = true
allowlist_externals = poetry
commands_pre = poetry install --only=typecheck --no-root --sync
commands = poetry run basedpyright
"""
